{"ast":null,"code":"var _jsxFileName = \"/home/jobtkk/sougou-kanri2/client/src/Components/counter/Container.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { Counter } from './Counter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { decrementAmount, fetchRequestFinish, fetchRequestStart, incrementAmount } from './module';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ActionDispatcher {\n  constructor(dispatch) {\n    this.dispatch = dispatch;\n    this.myHeaders = new Headers({\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'X-Requested-With': 'XMLHttpRequest'\n    });\n  }\n\n  increment(amount) {\n    this.dispatch(incrementAmount(amount));\n  }\n\n  decrement(amount) {\n    this.dispatch(decrementAmount(amount));\n  }\n\n  async asyncIncrement() {\n    this.dispatch(fetchRequestStart());\n\n    try {\n      const response = await fetch('/api/count', {\n        method: 'GET',\n        headers: this.myHeaders\n      });\n\n      if (response.status !== 200) {\n        throw new Error(`illegal status code: ${response.status}`);\n      }\n\n      const json = await response.json();\n      this.dispatch(incrementAmount(json.amount));\n    } catch (err) {\n      console.error(err);\n    } finally {\n      this.dispatch(fetchRequestFinish());\n    }\n  }\n\n}\nexport default function CounterContainer(props) {\n  _s();\n\n  const count = useSelector(state => {\n    return state.counter;\n  });\n  return /*#__PURE__*/_jsxDEV(Counter, {\n    value: count,\n    actions: new ActionDispatcher(useDispatch()),\n    param: props.match.params.myParams\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 7\n  }, this);\n}\n\n_s(CounterContainer, \"q/74Fv9VUxl5RIQtsVGpNG2vXH8=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = CounterContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CounterContainer\");","map":{"version":3,"sources":["/home/jobtkk/sougou-kanri2/client/src/Components/counter/Container.tsx"],"names":["React","Counter","useDispatch","useSelector","decrementAmount","fetchRequestFinish","fetchRequestStart","incrementAmount","ActionDispatcher","constructor","dispatch","myHeaders","Headers","increment","amount","decrement","asyncIncrement","response","fetch","method","headers","status","Error","json","err","console","error","CounterContainer","props","count","state","counter","match","params","myParams"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAGEC,eAHF,EAIEC,kBAJF,EAKEC,iBALF,EAMEC,eANF,QAOO,UAPP;;AAYA,OAAO,MAAMC,gBAAN,CAAuB;AAC5BC,EAAAA,WAAW,CAASC,QAAT,EAA6C;AAAA,SAApCA,QAAoC,GAApCA,QAAoC;AAAA,SAExDC,SAFwD,GAE5C,IAAIC,OAAJ,CAAY;AACtB,sBAAgB,kBADM;AAEtB,gBAAU,kBAFY;AAGtB,0BAAoB;AAHE,KAAZ,CAF4C;AAAE;;AAQnDC,EAAAA,SAAS,CAACC,MAAD,EAAuB;AACrC,SAAKJ,QAAL,CAAcH,eAAe,CAACO,MAAD,CAA7B;AACD;;AAEMC,EAAAA,SAAS,CAACD,MAAD,EAAuB;AACrC,SAAKJ,QAAL,CAAcN,eAAe,CAACU,MAAD,CAA7B;AACD;;AAE0B,QAAdE,cAAc,GAAkB;AAC3C,SAAKN,QAAL,CAAcJ,iBAAiB,EAA/B;;AAEA,QAAI;AACF,YAAMW,QAAkB,GAAG,MAAMC,KAAK,CAAC,YAAD,EAAe;AACnDC,QAAAA,MAAM,EAAE,KAD2C;AAEnDC,QAAAA,OAAO,EAAE,KAAKT;AAFqC,OAAf,CAAtC;;AAKA,UAAIM,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CAAW,wBAAuBL,QAAQ,CAACI,MAAO,EAAlD,CAAN;AACD;;AACD,YAAME,IAAwB,GAAG,MAAMN,QAAQ,CAACM,IAAT,EAAvC;AACA,WAAKb,QAAL,CAAcH,eAAe,CAACgB,IAAI,CAACT,MAAN,CAA7B;AACD,KAXD,CAWE,OAAOU,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD,KAbD,SAaU;AACR,WAAKd,QAAL,CAAcL,kBAAkB,EAAhC;AACD;AACF;;AApC2B;AAyC9B,eAAe,SAASsB,gBAAT,CAA0BC,KAA1B,EAA8C;AAAA;;AAC3D,QAAMC,KAAK,GAAG1B,WAAW,CAA4B2B,KAAD,IAAW;AAC7D,WAAOA,KAAK,CAACC,OAAb;AACD,GAFwB,CAAzB;AAGA,sBACI,QAAC,OAAD;AACI,IAAA,KAAK,EAAEF,KADX;AAEI,IAAA,OAAO,EAAE,IAAIrB,gBAAJ,CAAqBN,WAAW,EAAhC,CAFb;AAGI,IAAA,KAAK,EAAE0B,KAAK,CAACI,KAAN,CAAYC,MAAZ,CAAmBC;AAH9B;AAAA;AAAA;AAAA;AAAA,UADJ;AAOD;;GAXuBP,gB;UACRxB,W,EAMwBD,W;;;KAPhByB,gB","sourcesContent":["import * as React from 'react'\nimport {Counter} from './Counter'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {\n  CounterActions,\n  CounterState,\n  decrementAmount,\n  fetchRequestFinish,\n  fetchRequestStart,\n  incrementAmount\n} from './module'\nimport {Dispatch} from 'redux'\nimport {ReduxState} from '../Store/store'\nimport {RouteComponentProps} from 'react-router'\n\nexport class ActionDispatcher {\n  constructor(private dispatch: Dispatch<CounterActions>) {}\n\n  myHeaders = new Headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'X-Requested-With': 'XMLHttpRequest'\n  })\n\n  public increment(amount: number): void {\n    this.dispatch(incrementAmount(amount))\n  }\n\n  public decrement(amount: number): void {\n    this.dispatch(decrementAmount(amount))\n  }\n\n  public async asyncIncrement(): Promise<void> {\n    this.dispatch(fetchRequestStart())\n\n    try {\n      const response: Response = await fetch('/api/count', {\n        method: 'GET',\n        headers: this.myHeaders\n      })\n\n      if (response.status !== 200) {\n        throw new Error(`illegal status code: ${response.status}`)\n      }\n      const json: { amount: number } = await response.json()\n      this.dispatch(incrementAmount(json.amount))\n    } catch (err) {\n      console.error(err)\n    } finally {\n      this.dispatch(fetchRequestFinish())\n    }\n  }\n}\n\ntype RouterProps = RouteComponentProps<{myParams: string | undefined}>\n\nexport default function CounterContainer(props: RouterProps) {\n  const count = useSelector<ReduxState, CounterState>((state) => {\n    return state.counter\n  })\n  return (\n      <Counter\n          value={count}\n          actions={new ActionDispatcher(useDispatch())}\n          param={props.match.params.myParams}\n      />\n  )\n}"]},"metadata":{},"sourceType":"module"}